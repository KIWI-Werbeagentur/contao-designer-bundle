<?php

namespace Contao;

use Kiwi\Contao\DesignerBundle\Models\ColorModel;

if ($GLOBALS['TL_CONFIG']['useRTE']):

// Use document.write() here in case TinyMCE is loaded in a subpalette (see #1424)
    ?>
    <style>
        .tox-collection__item[title^="Heading"] .tox-collection__item-label,
        .tox-collection__item[title^="Überschrift"] .tox-collection__item-label {
            font-family: sans-serif;
            font-weight: bold;
            font-style: normal;
            text-decoration: rgb(0, 0, 0);
            text-transform: none;
            background-color: rgba(0, 0, 0, 0);
            padding: 0px 2px;
            border: 0px none rgb(0, 0, 0);
            border-radius: 0px;
            outline: rgb(0, 0, 0) 0px;
            text-shadow: none;
        }

        .tox-collection__item[title="Heading 1"] .tox-collection__item-label,
        .tox-collection__item[title="Überschrift 1"] .tox-collection__item-label {
            font-size: 32px;
        }

        .tox-collection__item[title="Heading 2"] .tox-collection__item-label,
        .tox-collection__item[title="Überschrift 2"] .tox-collection__item-label {
            font-size: 24px;
        }

        .tox-collection__item[title="Heading 3"] .tox-collection__item-label,
        .tox-collection__item[title="Überschrift 3"] .tox-collection__item-label {
            font-size: 18.72px;
        }

        .tox-collection__item[title="Heading 4"] .tox-collection__item-label,
        .tox-collection__item[title="Überschrift 4"] .tox-collection__item-label {
            font-size: 16px;
        }

        .tox-collection__item[title="Heading 5"] .tox-collection__item-label,
        .tox-collection__item[title="Überschrift 5"] .tox-collection__item-label {
            font-size: 13.28px;
        }

        .tox-collection__item[title="Heading 6"] .tox-collection__item-label,
        .tox-collection__item[title="Überschrift 6"] .tox-collection__item-label {
            font-size: 10.72px;
        }
    </style>
    <script>window.tinymce || document.write('<script src="<?= $this->asset('js/tinymce.min.js', 'contao-components/tinymce4') ?>">\x3C/script>')</script>
    <script>
        window.tinymce && tinymce.init({
            selector: '#<?= $this->selector ?>',
            min_height: 336,
            language: '<?= Backend::getTinyMceLanguage() ?>',
            element_format: 'html',
            document_base_url: '<?= Environment::get('base') ?>',
            entities: '160,nbsp,60,lt,62,gt,173,shy',
            branding: false,
            setup: function (editor) {
                editor.getElement().removeAttribute('required');
                document.querySelectorAll('[accesskey]').forEach(function (el) {
                    editor.addShortcut('access+' + el.accessKey, el.id, function () {
                        el.click();
                    });
                });
                editor.ui.registry.addButton('span', {
                    icon: 'highlight-bg-color',
                    tooltip: 'Hervorheben',
                    onAction: function () {
                        var text = editor.selection.getContent({'format': 'html'});
                        if (text && text.length > 0) {
                            editor.execCommand('mceInsertContent', false, '<span class="highlight">' + text + '</span>');
                        }
                    }
                });
                editor.ui.registry.addMenuButton('headingclassselect', {
                    text: '<?php if (Backend::getTinyMceLanguage() == 'de') {
                        echo 'Anzeigen als';
                    } else {
                        echo 'Display as';
                    } ?>',
                    tooltip: '<?php if (Backend::getTinyMceLanguage() == 'de') {
                        echo '(wird für SEO ignoriert)';
                    } else {
                        echo '(ignored for SEO)';
                    } ?>',
                    fetch: (callback) => {
                        const items = [
                            <?php
                            foreach ([1, 2, 3, 4, 5, 6] as $index) {
                                $headingRemoveClass = "";
                                for ($i = 1; $i <= 6; $i++) {
                                    if ($i !== $index) {
                                        $headingRemoveClass .= "tinymce.activeEditor.dom.removeClass(activeNode, 'h" . $i . "');\n";
                                    }
                                }
                                $headingRemoveClass .= "tinymce.activeEditor.dom.addClass(activeNode, 'h" . $index . "');";
                                echo /* @lang JavaScript */
                                    "{
                            type: 'togglemenuitem',
                            text: 'Heading " . $index . "',
                            onAction: () => {
                                let selection = tinymce.activeEditor.selection;
                                let activeNode = selection.getNode();
                                tinymce.activeEditor.undoManager.add();
                                if (selection.isCollapsed()) {
                                    // no selection, just caret
                                    if (['H1','H2','H3','H4','H5','H6'].includes(activeNode.tagName)) {
                                        // add class to heading
                                        if (activeNode.classList.contains('h" . $index . "')) {
                                            // heading has class
                                            tinymce.activeEditor.dom.removeClass(activeNode, 'h" . $index . "');
                                        } else {
                                            // heading doesnt have h1 class
                                            " . $headingRemoveClass . "
                                        }
                                    } else if (['P'].includes(activeNode.tagName)) {
                                        // wrap paragraph content with span with hx
                                        activeNode.innerHTML = '<span class=\"h" . $index . "\">' + activeNode.innerHTML + '</span>';
                                        selection.setCursorLocation(activeNode.firstChild);
                                        //tinymce.activeEditor.focus();
                                    } else if (['SPAN'].includes(activeNode.tagName)) {
                                        // check span for class
                                        if (activeNode.classList.contains('h" . $index . "')) {
                                            // span has class
                                            let parent = activeNode.parentElement;
                                            tinymce.activeEditor.dom.removeClass(activeNode, 'h" . $index . "');
                                            if (activeNode.classList.length <= 0) {
                                                activeNode.outerHTML = activeNode.innerHTML;
                                            }
                                            selection.setCursorLocation(parent, 0);
                                        } else {
                                            // span doesnt have class
                                            " . $headingRemoveClass . "
                                        }
                                    }
                                } else {
                                    // selection
                                    if (['H1','H2','H3','H4','H5','H6','SPAN'].includes(activeNode.tagName) && activeNode.innerHTML === selection.getContent({format : 'html'})) {
                                        if (activeNode.classList.contains('h" . $index . "')) {
                                            // heading has class
                                            tinymce.activeEditor.dom.removeClass(activeNode, 'h" . $index . "');
                                        } else {
                                            // heading doesnt have h1 class
                                            " . $headingRemoveClass . "
                                        }
                                    } else {
                                        selection.setContent('<span class=\"h" . $index . "\">' + selection.getContent() + '</span>');
                                    }
                                }
                                tinymce.activeEditor.undoManager.add();
                            },
                            onSetup: (api) => {
                                let selection = tinymce.activeEditor.selection;
                                let activeNode = selection.getNode();
                                if (selection.isCollapsed() || activeNode.innerHTML === selection.getContent({format: 'html'})) {
                                    /*if (activeNode.tagName === 'SPAN' && activeNode.classList.contains('h" . $index . "')) {
                                        api.setDisabled(true);
                                    }*/
                                    api.setActive(activeNode.classList.contains('h" . $index . "'));
                                } else {
                                    if (activeNode.tagName === 'H" . $index . "') {
                                        api.setDisabled(!(activeNode.outerHTML.search(selection.getContent({format: 'html'})) >= 0));
                                    }
                                }
                                return (api) => {};
                            }
                        }";
                                if (!($index == 6)) {
                                    echo ', ';
                                }
                            }?>
                        ];
                        callback(items);
                    }
                });
            },
            init_instance_callback: function (editor) {
                if (document.activeElement && document.activeElement.id && document.activeElement.id == editor.id) {
                    editor.editorManager.get(editor.id).focus();
                }
                editor.on('focus', function () {
                    Backend.getScrollOffset();
                });
            },

            <?php $this->block('picker'); ?>
            file_picker_callback: function (callback, value, meta) {
                Backend.openModalSelector({
                    'id': 'tl_listing',
                    'title': document.getElement('.tox-dialog__title').get('text'),
                    'url': Contao.routes.backend_picker + '?context=' + (meta.filetype == 'file' ? 'link' : 'file') + '&amp;extras[fieldType]=radio&amp;extras[filesOnly]=true&amp;extras[source]=<?= $this->source ?>&amp;value=' + value + '&amp;popup=1',
                    'callback': function (table, val) {
                        document.getElement('.tox-dialog input')?.focus();
                        callback(val.join(','));
                    }
                });
            },
            file_picker_types: <?= json_encode($this->fileBrowserTypes) ?>,
            <?php $this->endblock(); ?>

            <?php $this->block('content_css'); ?>
            content_css: ['system/themes/<?= Backend::getTheme() ?>/tinymce.min.css', 'bundles/kiwibootstrap/tinymce.css'],
            importcss_file_filter: 'tinymce.min.css',
            <?php $this->endblock(); ?>

            <?php $this->block('plugins'); ?>
            plugins: 'autosave charmap code fullscreen image importcss link lists paste searchreplace stripnbsp tabfocus table visualblocks visualchars',
            <?php $this->endblock(); ?>

            <?php $this->block('valid_elements'); ?>
            extended_valid_elements: 'q[cite|class|title],article,section,hgroup,figure,figcaption,a[rel|rev|charset|hreflang|tabindex|accesskey|type|name|href|target|title|class|onfocus|onblur|data-lightbox]',
            <?php $this->endblock(); ?>

            <?php $this->block('menubar'); ?>
            menubar: 'file edit insert view format table',
            <?php $this->endblock(); ?>

            <?php $this->block('toolbar'); ?>
            toolbar: 'link unlink | image | formatselect headingclassselect | bold italic span | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | undo redo | code',
            <?php $this->endblock(); ?>

            <?php $this->block('contextmenu'); ?>
            contextmenu: false,
            <?php $this->endblock(); ?>

            <?php $this->block('cache_suffix'); ?>
            cache_suffix: '?v=<?= $this->assetVersion('js/tinymce.min.js', 'contao-components/tinymce4') ?>',
            <?php $this->endblock(); ?>

            <?php $this->block('custom'); ?>
            link_class_list: [
                {title: 'None', value: ''},
                <?php Controller::loadLanguageFile('design'); ?>

                <?php foreach (ColorModel::findApplicable('cta') as $objColor):?>
                <?php foreach ($GLOBALS['design']['ctaDesign'] as $strName => $strDesign):?>
                {title: '<?= $GLOBALS['TL_LANG']['design']['ctaDesign'][$strName] ?> | <?= $objColor->title ?>', value:'<?= str_replace("{{ctaColor}}", $objColor->variable, $strDesign) ?>'},
                <?php endforeach;?>
                <?php endforeach;?>
            ],
            formats: {
                highlight: {
                    selector: 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li,table,img,audio,video',
                    classes: 'highlight'
                }
            },
            style_formats_merge: true,
            style_formats: [
                {
                    title: '<?php if (Backend::getTinyMceLanguage() == 'de') {
                        echo 'Hervorheben';
                    } else {
                        echo 'Highlight';
                    } ?>', format: 'highlight'
                }
            ],
            paste_as_text: true,
            <?php $this->endblock(); ?>

            <?php if ($this->readonly): ?>
            readonly: true,
            <?php endif; ?>

            browser_spellcheck: true,
            tabfocus_elements: ':prev,:next',
            importcss_append: true
        });
    </script>
<?php endif; ?>
