<?php

namespace Kiwi\Contao\DesignerBundle\DataContainer;

use Contao\Automator;
use Contao\CoreBundle\DependencyInjection\Attribute\AsCallback;
use Contao\Database;
use Contao\DataContainer;
use Contao\FrontendTemplate;
use Contao\LayoutModel;
use Contao\System;
use Contao\ThemeModel;
use Kiwi\Contao\DesignerBundle\Models\ColorSchemeModel;
use Symfony\Component\Filesystem\Filesystem;

class ColorSchemeListener
{
    #[AsCallback(table: 'tl_color_scheme', target: 'fields.alias.save')]
    public function generateAlias($varValue, DataContainer $objDca)
    {
        $aliasExists = static function (string $alias) use ($objDca): bool {
            return Database::getInstance()->prepare("SELECT id FROM tl_color_scheme WHERE alias=? AND id!=?")->execute($alias, $objDca->id)->numRows > 0;
        };

        // Generate an alias if there is none
        if (!$varValue) {
            $varValue = System::getContainer()->get('contao.slug')->generate((string)$objDca->activeRecord->title, [], $aliasExists);
        } elseif (preg_match('/^[1-9]\d*$/', $varValue)) {
            throw new \Exception(sprintf($GLOBALS['TL_LANG']['ERR']['aliasNumeric'], $varValue));
        } elseif ($aliasExists($varValue)) {
            throw new \Exception(sprintf($GLOBALS['TL_LANG']['ERR']['aliasExists'], $varValue));
        }

        return $varValue;
    }

    #[AsCallback(table: 'tl_content', target: 'fields.scheme.options')]
    public function getSchemes()
    {
        return ["inherit" => &$GLOBALS['TL_LANG']['design']['scheme']['inherit']] + ColorSchemeModel::findAll()->fetchEach('title');
    }

    public function generateSchemesScss(?DataContainer $objDca = null, ?int $undoId = null)
    {
        $fs = new Filesystem();
        $automator = new Automator();

        $targetPath = System::getContainer()->getParameter('kernel.project_dir') . '/files/themes/';

        if (!$fs->exists($targetPath)) {
            $fs->mkdir($targetPath);
        }

        $arrLayoutSchemes = [];
        foreach(LayoutModel::findAll() ?? [] as $objLayout){
            $objTheme = ThemeModel::findByPk($objLayout->pid);
            $arrLayoutSchemes["$objTheme->alias--$objLayout->alias"] = ColorSchemeModel::findByPk($objLayout->scheme)->alias ?? '';
        }

        $objTemplate = System::getContainer()->get('twig')->render('@KiwiDesigner/schemes.scss.twig', [
            'layoutSchemes' => $arrLayoutSchemes,
            'schemes' => ColorSchemeModel::findAll()->fetchAll(),
            'props' => $GLOBALS['scheme']['fields']
        ]);

        if (isset($GLOBALS['TL_HOOKS']['alterSchemesScss']) && \is_array($GLOBALS['TL_HOOKS']['alterSchemesScss']))
        {
            foreach ($GLOBALS['TL_HOOKS']['alterSchemesScss'] as $callback)
            {
                $objTemplate = System::importStatic($callback[0])->{$callback[1]}($objTemplate);
            }
        }

        file_put_contents($targetPath . 'schemes.scss', "// This file is autogenerated. Do not change its contents, it will be overwritten.\n\n" . $objTemplate);

        $automator->purgeScriptCache();
    }
}